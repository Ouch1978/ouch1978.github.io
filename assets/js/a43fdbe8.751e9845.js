"use strict";(self.webpackChunkouch1978_at_github=self.webpackChunkouch1978_at_github||[]).push([[6501],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,g=p["".concat(u,".").concat(m)]||p[m]||c[m]||a;return t?r.createElement(g,i(i({ref:n},d),{},{components:t})):r.createElement(g,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},47620:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],s={title:"\u5be6\u4f5c\u53ef\u66ab\u505c\u548c\u7e7c\u7e8c\u5de5\u4f5c\u7684 Background Worker",description:"\u539f\u751f\u7684 Background Worker \u662f\u4e0d\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u529f\u80fd\u7684\uff0c\u4e0d\u904e\u6211\u5011\u53ef\u4ee5\u52d5\u4e00\u4e9b\u624b\u8173\uff0c\u8b93\u5b83\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u3002",author:"ouch1978",image:"./resumable-background-worker.gif",tags:["WPF","C#",".NET"],keywords:["Background Worker","Manual Reset","Pause","Resume"],last_update:{date:"2022/09/06 GMT+8",author:"Ouch Liu"}},u=void 0,l={unversionedId:"microsoft-dot-net/wpf/add-pause-resume-support-to-background-worker/index",id:"microsoft-dot-net/wpf/add-pause-resume-support-to-background-worker/index",title:"\u5be6\u4f5c\u53ef\u66ab\u505c\u548c\u7e7c\u7e8c\u5de5\u4f5c\u7684 Background Worker",description:"\u539f\u751f\u7684 Background Worker \u662f\u4e0d\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u529f\u80fd\u7684\uff0c\u4e0d\u904e\u6211\u5011\u53ef\u4ee5\u52d5\u4e00\u4e9b\u624b\u8173\uff0c\u8b93\u5b83\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u3002",source:"@site/docs/01-microsoft-dot-net/03-wpf/02-add-pause-resume-support-to-background-worker/index.md",sourceDirName:"01-microsoft-dot-net/03-wpf/02-add-pause-resume-support-to-background-worker",slug:"/microsoft-dot-net/wpf/add-pause-resume-support-to-background-worker/",permalink:"/docs/microsoft-dot-net/wpf/add-pause-resume-support-to-background-worker/",draft:!1,editUrl:"https://github.com/ouch1978/ouch1978.github.io/edit/main/docs/01-microsoft-dot-net/03-wpf/02-add-pause-resume-support-to-background-worker/index.md",tags:[{label:"WPF",permalink:"/docs/tags/wpf"},{label:"C#",permalink:"/docs/tags/c"},{label:".NET",permalink:"/docs/tags/net"}],version:"current",lastUpdatedBy:"Ouch Liu",lastUpdatedAt:1662393600,formattedLastUpdatedAt:"2022\u5e749\u67085\u65e5",frontMatter:{title:"\u5be6\u4f5c\u53ef\u66ab\u505c\u548c\u7e7c\u7e8c\u5de5\u4f5c\u7684 Background Worker",description:"\u539f\u751f\u7684 Background Worker \u662f\u4e0d\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u529f\u80fd\u7684\uff0c\u4e0d\u904e\u6211\u5011\u53ef\u4ee5\u52d5\u4e00\u4e9b\u624b\u8173\uff0c\u8b93\u5b83\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u3002",author:"ouch1978",image:"./resumable-background-worker.gif",tags:["WPF","C#",".NET"],keywords:["Background Worker","Manual Reset","Pause","Resume"],last_update:{date:"2022/09/06 GMT+8",author:"Ouch Liu"}},sidebar:"tutorialSidebar",previous:{title:"WPF \u900f\u660e\u80cc\u666f\u81ea\u8a02\u8996\u7a97\u5206\u4eab",permalink:"/docs/microsoft-dot-net/wpf/wpf-custom-window/"},next:{title:"\u5bb9\u5668\u5316\u76f8\u95dc",permalink:"/docs/category/\u5bb9\u5668\u5316\u76f8\u95dc"}},d={image:t(62088).Z},c=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"\u6709\u5716\u6709\u771f\u76f8",id:"\u6709\u5716\u6709\u771f\u76f8",level:2},{value:"\u539f\u7406",id:"\u539f\u7406",level:2},{value:"\u7a0b\u5f0f\u78bc",id:"\u7a0b\u5f0f\u78bc",level:2},{value:"\u539f\u59cb\u78bc\u5728\u54ea?",id:"\u539f\u59cb\u78bc\u5728\u54ea",level:2}],p={toc:c};function m(e){var n=e.components,s=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,a.kt)("p",null,"\u539f\u751f\u7684 Background Worker \u662f\u4e0d\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u529f\u80fd\u7684\uff0c\u4e0d\u904e\u6211\u5011\u53ef\u4ee5\u52d5\u4e00\u4e9b\u624b\u8173\uff0c\u8b93\u5b83\u652f\u63f4\u66ab\u505c\u548c\u7e7c\u7e8c\u3002"),(0,a.kt)("h2",{id:"\u6709\u5716\u6709\u771f\u76f8"},"\u6709\u5716\u6709\u771f\u76f8"),(0,a.kt)("p",null,"\u76f4\u63a5\u770b\u7bc4\u4f8b\u6bd4\u8f03\u6709 fu\uff0c\u4f86\u770b\u770b\u5be6\u969b\u64cd\u4f5c\u7684\u6a23\u5b50\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u5be6\u969b\u64cd\u4f5c\u7bc4\u4f8b",src:t(62088).Z,title:"Resumable background worker sample",width:"1234",height:"708"})),(0,a.kt)("h2",{id:"\u539f\u7406"},"\u539f\u7406"),(0,a.kt)("p",null,"\u96d6\u7136 Background Worker \u672c\u8eab\u4e26\u6c92\u63d0\u4f9b\u66ab\u505c\u548c\u7e7c\u7e8c\u7684\u65b9\u6cd5\u3002"),(0,a.kt)("p",null,"\u4e0d\u904e\uff0c\u6211\u5011\u9084\u662f\u53ef\u4ee5\u900f\u904e ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.threading.manualresetevent?view=net-6.0",title:"ManualResetEvent"},"ManualResetEvent")," \u9019\u500b\u985e\u5225\u4f86\u5c0d\u57f7\u884c\u7dd2\u52d5\u4e00\u4e9b\u624b\u8173\uff0c\u8b93 Background Worker \u53ef\u4ee5\u88ab\u624b\u52d5\u66ab\u505c\u6216\u7e7c\u7e8c\u3002"),(0,a.kt)("p",null,"\u7c21\u55ae\u7684\u8aaa\uff0cManualResetEvent \u672c\u8eab\u5177\u5099\u5169\u7a2e\u72c0\u614b\uff0c\u5206\u5225\u70ba",(0,a.kt)("inlineCode",{parentName:"p"},"\u5df2\u53d7\u4fe1(signaled)"),"\u548c",(0,a.kt)("inlineCode",{parentName:"p"},"\u672a\u53d7\u4fe1(non-signaled)"),"\u3002"),(0,a.kt)("p",null,"\u9019\u500b\u72c0\u614b\u53ef\u4ee5\u900f\u904e\u5efa\u69cb\u5b50\u4f86\u6307\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u900f\u904e\u5b83\u7684 ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.threading.eventwaithandle.set?view=net-6.0#system-threading-eventwaithandle-set",title:"ManualResetEvent.Set()"},"Set()")," \u65b9\u6cd5\u4f86\u5c07\u72c0\u614b\u5207\u70ba\u5df2\u53d7\u4fe1(signaled)\u6216\u662f\u900f\u904e ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.threading.eventwaithandle.reset?view=net-6.0#system-threading-eventwaithandle-reset",title:"ManualResetEvent.Reset()"},"Reset()")," \u65b9\u6cd5\u4f86\u5207\u6210\u672a\u53d7\u4fe1(non-signaled)\u3002"),(0,a.kt)("p",null,"\u7576\u5b83\u7684\u72c0\u614b\u662f\u672a\u53d7\u4fe1(non-signaled)\u6642\uff0c\u53ef\u4ee5\u900f\u904e ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.threading.waithandle.waitone?view=net-6.0#system-threading-waithandle-waitone",title:"ManualResetEvent.WaitOne()"},"WaitOne()")," \u65b9\u6cd5\u4f86\u963b\u585e\u57f7\u884c\u7dd2\uff0c\u76f4\u5230\u5b83\u7684\u72c0\u614b\u5207\u6210\u5df2\u53d7\u4fe1(signaled)\u70ba\u6b62\u3002"),(0,a.kt)("h2",{id:"\u7a0b\u5f0f\u78bc"},"\u7a0b\u5f0f\u78bc"),(0,a.kt)("p",null,"\u91cd\u9ede\u5728 Code-behind \u7684\u90e8\u4efd\uff0c\u6240\u4ee5\u53ef\u4ee5\u770b\u770b Code-behind \u7684\u90e8\u4efd\u5c31\u597d\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MainWindow.xaml.cs"',title:'"MainWindow.xaml.cs"'},'using System.ComponentModel;\nusing System.Threading;\nusing System.Windows;\n\nnamespace ResumableBackgroundWorker\n{\n    public partial class MainWindow : Window\n    {\n        private readonly BackgroundWorker _myWorker = new BackgroundWorker\n        {\n            WorkerReportsProgress = true,\n            WorkerSupportsCancellation = true\n        };\n\n\n        // \u900f\u904e ManualResetEvent \u4f86\u624b\u52d5\u5c01\u9396\u6216\u662f\u91cb\u653e\u57f7\u884c\u7dd6\u3002\n        // \u4e26\u4e14\u900f\u904e\u5efa\u69cb\u5b50\u8b93\u5b83\u5728\u88ab\u5efa\u7acb\u8d77\u4f86\u7684\u6642\u5019\u8655\u65bc\u5df2\u53d7\u4fe1 (signaled) \u72c0\u614b\u3002\n        // highlight-next-line\n        private readonly ManualResetEvent _manualReset = new ManualResetEvent(true);\n\n        private readonly int _totalCount = 999;\n\n        public MainWindow()\n        {\n            this.SourceInitialized += new System.EventHandler(MainWindow_SourceInitialized);\n\n            _myWorker.DoWork += _myWorker_DoWork;\n            _myWorker.ProgressChanged += _myWorker_ProgressChanged;\n            _myWorker.RunWorkerCompleted += _myWorker_RunWorkerCompleted;\n        }\n\n        private void _myWorker_DoWork(object? sender, DoWorkEventArgs e)\n        {\n            for (var i = 0; i < _totalCount; ++i)\n            {\n                if (_myWorker.CancellationPending)\n                {\n                    e.Cancel = true;\n                    return;\n                }\n\n\n                //\u7576 ManualResetEvent \u7684\u72c0\u614b\u70ba\u672a\u53d7\u4fe1 (non-signaled) \u72c0\u614b\u6642\u6703\u963b\u585e\u57f7\u884c\u7dd2\u3002\n                // highlight-next-line\n                _manualReset.WaitOne();\n\n                Thread.Sleep(1);\n\n                _myWorker.ReportProgress(i + 1);\n\n            }\n        }\n\n        private void _myWorker_ProgressChanged(object? sender, ProgressChangedEventArgs e)\n        {\n            txtMessage.Text = $"{e.ProgressPercentage.ToString().PadLeft(_totalCount.ToString().Length)}/{_totalCount}";\n        }\n\n        private void _myWorker_RunWorkerCompleted(object? sender, RunWorkerCompletedEventArgs e)\n        {\n            btnStop.IsEnabled = false;\n        }\n\n        private void tglPauseResume_Checked(object sender, RoutedEventArgs e)\n        {\n            if (_myWorker.IsBusy == false)\n            {\n                _myWorker.RunWorkerAsync();\n            }\n            else\n            {\n                //\u5c07 ManualResetEvent \u7684\u72c0\u614b\u5207\u63db\u70ba\u5df2\u53d7\u4fe1 (signaled) \u72c0\u614b\uff0c\u8b93\u5b83\u5728\u547c\u53eb WaitOne() \u65b9\u6cd5\u6642\u8b93\u57f7\u884c\u7dd2\u7e7c\u7e8c\u57f7\u884c\u3002\n                // highlight-next-line\n                _manualReset.Set();\n            }\n        }\n\n        private void tglPauseResume_Unchecked(object sender, RoutedEventArgs e)\n        {\n            //\u5c07 ManualResetEvent \u7684\u72c0\u614b\u5207\u63db\u70ba\u672a\u53d7\u4fe1 (non-signaled) \u72c0\u614b\uff0c\u8b93\u5b83\u5728\u547c\u53eb WaitOne() \u65b9\u6cd5\u6642\u963b\u64cb\u57f7\u884c\u7dd2\u7e7c\u7e8c\u57f7\u884c\u3002\n            // highlight-next-line\n            _manualReset.Reset();\n        }\n\n        private void btnStop_Click(object sender, RoutedEventArgs e)\n        {\n            _myWorker.CancelAsync();\n        }\n    }\n}\n')),(0,a.kt)("h2",{id:"\u539f\u59cb\u78bc\u5728\u54ea"},"\u539f\u59cb\u78bc\u5728\u54ea?"),(0,a.kt)("p",null,"\u672c\u6587\u7684\u5b8c\u6574\u7bc4\u4f8b\u539f\u59cb\u78bc\u9023\u7d50\u5982\u4e0b\uff0c\u8acb\u81ea\u884c\u53d6\u7528\uff1a"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Ouch1978/wpf-resumable-background-worker",title:"WPF resumable background worker"},(0,a.kt)("img",{alt:"Sample",src:t(4638).Z,width:"320",height:"128"}))))}m.isMDXComponent=!0},62088:function(e,n,t){n.Z=t.p+"assets/images/resumable-background-worker-f7baf693f578ef5d81261fb48f631615.gif"},4638:function(e,n,t){n.Z=t.p+"assets/images/source-code-153869134bfab34cdb0cca6222a56300.png"}}]);